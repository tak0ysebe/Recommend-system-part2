import os
import pickle
import numpy as np
import pandas as pd
import streamlit as st
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
styles_file = "styles.csv"
links_file = "images.csv"      # CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ filename, link
imgs_features_file = "imgs_features.pkl"
files_idx_file = "files.pkl"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
with open(imgs_features_file, "rb") as f:
    imgs_features = pickle.load(f)
with open(files_idx_file, "rb") as f:
    files_all = pickle.load(f)
files = files_all[: imgs_features.shape[0]]

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü
styles = pd.read_csv(styles_file, on_bad_lines='skip')
links_df = pd.read_csv(links_file)
link_map = dict(zip(links_df["filename"], links_df["link"]))

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ id ‚Üî –∏–Ω–¥–µ–∫—Å
file_ids = [int(os.path.basename(p).replace(".jpg","")) for p in files]
id_to_index = {pid: idx for idx, pid in enumerate(file_ids)}

# –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
features_norm = imgs_features / np.linalg.norm(imgs_features, axis=1, keepdims=True)
kmeans = KMeans(n_clusters=20, random_state=42)
kmeans_labels = kmeans.fit_predict(features_norm)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ feature-index
def show_item(idx, title=None):
    pid = file_ids[idx]
    fname = f"{pid}.jpg"
    link = link_map.get(fname)
    if title:
        st.subheader(title)
    if link:
        st.image(link, width=200)
    else:
        st.warning(f"–°—Å—ã–ª–∫–∞ –¥–ª—è {fname} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    info = styles[styles["id"] == pid].iloc[0]
    st.markdown(f"**ID:** {pid}")
    st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {info.productDisplayName}")
    st.markdown(f"**–ü–æ–ª:** {info.gender}")
    st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {info.masterCategory} ‚Üí {info.subCategory} ‚Üí {info.articleType}")
    st.markdown(f"**–¶–≤–µ—Ç:** {info.baseColour}")
    st.markdown(f"**–°–µ–∑–æ–Ω:** {info.season} {int(info.year) if not pd.isna(info.year) else ''}")
    st.markdown(f"**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** {info.usage}")

# UI
st.title("üëó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–¥–µ–∂–¥—ã")

tab1, tab2 = st.tabs(["üîç –ü–æ ID", "üéõ –§–∏–ª—å—Ç—Ä—ã"])

# –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ ID
with tab1:
    user_id = st.number_input("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞:", min_value=min(file_ids), max_value=max(file_ids), step=1)
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        if user_id not in id_to_index:
            st.error("ID –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
        else:
            idx = id_to_index[user_id]
            show_item(idx, title="–í—ã –≤—ã–±—Ä–∞–ª–∏")
            feat = imgs_features[idx].reshape(1, -1)
            members = np.where(kmeans_labels == kmeans_labels[idx])[0]
            members = members[members != idx]
            sims = cosine_similarity(feat, imgs_features[members])[0]
            top3 = members[np.argsort(sims)[-3:]]
            st.subheader("–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã:")
            cols = st.columns(3)
            for i,m in enumerate(top3):
                with cols[i]:
                    show_item(m)

# –í–∫–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
with tab2:
    st.header("üéõ –§–∏–ª—å—Ç—Ä—ã –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º")

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ü–∏–π (–∫–∞–∫ –±—ã–ª–æ)
    for col in ["gender","baseColour","season","usage"]:
        styles[col] = styles[col].astype(str)
    gender = st.selectbox("–ü–æ–ª", ["–í—Å–µ"] + sorted(styles["gender"].unique()))
    colour = st.selectbox("–¶–≤–µ—Ç", ["–í—Å–µ"] + sorted(styles["baseColour"].unique()))
    season = st.selectbox("–°–µ–∑–æ–Ω", ["–í—Å–µ"] + sorted(styles["season"].unique()))
    usage = st.selectbox("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", ["–í—Å–µ"] + sorted(styles["usage"].unique()))

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered = styles.copy()
    if gender != "–í—Å–µ":   filtered = filtered[filtered["gender"] == gender]
    if colour != "–í—Å–µ":   filtered = filtered[filtered["baseColour"] == colour]
    if season != "–í—Å–µ":   filtered = filtered[filtered["season"] == season]
    if usage != "–í—Å–µ":    filtered = filtered[filtered["usage"] == usage]

    st.write(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(filtered)}")

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–∏–º—ã—Ö
    if "num_to_show" not in st.session_state:
        st.session_state.num_to_show = 10

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ num_to_show
    for _, row in filtered.head(st.session_state.num_to_show).iterrows():
        pid = row["id"]
        if pid in id_to_index:
            show_item(id_to_index[pid])
            st.markdown("---")

    # –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë¬ª
    if st.session_state.num_to_show < len(filtered):
        if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"):
            st.session_state.num_to_show += 10

